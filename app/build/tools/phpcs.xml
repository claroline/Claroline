<?xml version="1.0"?>

<ruleset name="Claronext coding standard">
    <description>Claronext coding standard</description>
    <exclude-pattern>*/Resources/*</exclude-pattern>
    <exclude-pattern>*/Migrations/*</exclude-pattern>
    <!-- our base coding standard is PSR -->
    <!-- sniffs come from PSR, Generic, PEAR, Squiz, Zend and Symfony -->
    <!-- see https://github.com/klaussilveira/phpcs-psr -->
    <!-- see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md -->
    <!-- see https://github.com/opensky/Symfony2-coding-standard -->
    <!-- see http://edorian.github.com/php-coding-standard-generator/#phpcs -->
    <rule ref="PSR">
        <!-- excluded because some third-party code (e.g. doctrine) uses other conventions -->
        <exclude name="Generic.NamingConventions.UpperCaseConstantName"/>
        <!-- excluded because it requires interfaces methods to have modifiers (Symfony2 sniff used instead) -->
        <exclude name="Squiz.Scope.MethodScope"/>
        <!-- excluded because phpcs should run on windows -->
        <exclude name="Generic.Files.LineEndings"/>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <!-- we don't want warnings for +80 characters lines -->
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="120"/>
        </properties>
    </rule>
    <!-- statement body (i.e. within braces) cannot be empty -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <!-- overriding methods must add something to the parent implementation -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    <!-- one statement per line (useful to detect double semi-colons) -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <!-- classes must have their opening brace on a new line and an indentation of four spaces -->
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <!-- BSD-Allman function declaration, plus closure checking -->
    <rule ref="PEAR.Functions.FunctionDeclaration"/>
    <!-- we don't follow PEAR exception for multi-line declarations -->
    <!-- opening brace should always be on a line by itself -->
    <rule ref="PEAR.Functions.FunctionDeclaration.NewlineBeforeOpenBrace">
        <severity>0</severity>
    </rule>
    <!-- check arguments spacing and/or indentation (multi-line calls) -->
    <rule ref="PEAR.Functions.FunctionCallSignature"/>
    <!-- no dead code (e.g. expression after return statement) -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- no count() inside for loops -->
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>
    <!-- no whitespaces at the end of a line, no more than one blank line between statements -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <!-- operators must be surrounded by one space -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <!-- variable names must be in camel case and without digits -->
    <rule ref="Zend.NamingConventions.ValidVariableName"/>
    <!-- private variables don't have to start with an underscore -->
    <rule ref="Zend.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>
    <!-- only one class per file -->
    <rule ref="Symfony2.Classes.MultipleClassesOneFile"/>
    <!-- blank line required before return statement -->
    <rule ref="Symfony2.Formatting.BlankLineBeforeReturn"/>
    <!-- interfaces must be suffixed by "Interface" -->
    <rule ref="Symfony2.NamingConventions.InterfaceSuffix"/>
    <!-- methods must have scope modifiers (not applicable to interfaces) -->
    <rule ref="Symfony2.Scope.MethodScope"/>
</ruleset>